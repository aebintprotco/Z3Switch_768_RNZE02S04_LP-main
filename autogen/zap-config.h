// This file is generated by ZCL Advanced Platform generator. Please don't edit manually.

// The following is brought in by the endianness component, which all
// applications must include
#include "sl_endianness.h"

#ifndef SILABS_AF_ENDPOINT_CONFIG
#define SILABS_AF_ENDPOINT_CONFIG 1

// Default values for the attributes longer than a pointer, in a form of a
// binary blob. All attribute values with size greater than 2 bytes. Excluding 0
// values and externally saved values. Separate block is generated for
// big-endian and little-endian cases.

#define GENERATED_DEFAULTS_COUNT (4)

#if BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
  0x04, 'R', 'I', 'N', 'O', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  /* 0,DEFAULT value for cluster: Basic, attribute: manufacturer name, side: server */ \
  0x09, 'R', 'N', 'Z', 'L', '0', '3', 'C', '0', '5', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  /* 32,DEFAULT value for cluster: Basic, attribute: model identifier, side: server */ \
   0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, /* 64,DEFAULT value for cluster: Over the Air Bootloading, attribute: OTA Upgrade Server ID, side: client */ \
   0xFF, 0xFF, 0xFF, 0xFF, /* 72,DEFAULT value for cluster: Over the Air Bootloading, attribute: Offset (address) into the file, side: client */ \
}
#else //!BIGENDIAN_CPU
#define GENERATED_DEFAULTS { \
  0x04, 'R', 'I', 'N', 'O', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  /* 0,DEFAULT value for cluster: Basic, attribute: manufacturer name, side: server */ \
  0x09, 'R', 'N', 'Z', 'L', '0', '3', 'C', '0', '5', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  /* 32,DEFAULT value for cluster: Basic, attribute: model identifier, side: server */ \
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* 64,DEFAULT value for cluster: Over the Air Bootloading, attribute: OTA Upgrade Server ID, side: client */ \
  0xFF, 0xFF, 0xFF, 0xFF,  /* 72,DEFAULT value for cluster: Over the Air Bootloading, attribute: Offset (address) into the file, side: client */ \
}
#endif


// This is an array of EmberAfAttributeMinMaxValue structures.

#define GENERATED_MIN_MAX_DEFAULT_COUNT (0)
	#define GENERATED_MIN_MAX_DEFAULTS { }


#define GENERATED_ATTRIBUTE_COUNT (40)

// This is an array of EmberAfAttributeMetadata structures.
#define GENERATED_ATTRIBUTES { \
  { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x08  } }, /* 0 Cluster: Basic, Attribute: ZCL version, Side: server*/ \
		  { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 1 Cluster: Basic, Attribute: application version, Side: server*/ \
		  { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 2 Cluster: Basic, Attribute: stack version, Side: server*/ \
		  { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 3 Cluster: Basic, Attribute: hardware version, Side: server*/ \
		  { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 32, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(generatedDefaults[0]) } }, /* 4 Cluster: Basic, Attribute: manufacturer name, Side: server*/ \
	  { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 32, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)&(generatedDefaults[32]) } }, /* 5 Cluster: Basic, Attribute: model identifier, Side: server*/ \
	  { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 Cluster: Basic, Attribute: date code, Side: server*/ \
	  { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0x00  } }, /* 7 Cluster: Basic, Attribute: power source, Side: server*/ \
		  { 0x0008, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0xFF  } }, /* 8 Cluster: Basic, Attribute: generic device class, Side: server*/ \
		  { 0x0009, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)0xFF  } }, /* 9 Cluster: Basic, Attribute: generic device type, Side: server*/ \
		  { 0x000A, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 10 Cluster: Basic, Attribute: product code, Side: server*/ \
	  { 0x000B, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 64, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 11 Cluster: Basic, Attribute: product url, Side: server*/ \
	  { 0x4000, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 16, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 12 Cluster: Basic, Attribute: sw build id, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_SINGLETON), { (uint8_t*)36000  } }, /* 13 Cluster: Basic, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 14 Cluster: Identify, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x0000  } }, /* 15 Cluster: Identify, Attribute: identify time, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)2  } }, /* 16 Cluster: Identify, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 17 Cluster: Groups, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_BITMAP8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 18 Cluster: Groups, Attribute: name support, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)3  } }, /* 19 Cluster: Scenes, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)2  } }, /* 20 Cluster: On/off, Attribute: cluster revision, Side: client*/ \
		  { 0xFFFE, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00  } }, /* 21 Cluster: On/off, Attribute: reporting status, Side: client*/ \
		  { 0x0000, ZCL_BOOLEAN_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_TOKENIZE), { (uint8_t*)0x00  } }, /* 22 Cluster: On/off, Attribute: on/off, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)2  } }, /* 23 Cluster: On/off, Attribute: cluster revision, Side: server*/ \
		  { 0x0000, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (0x00), { (uint8_t*)0x00  } }, /* 24 Cluster: On/off Switch Configuration, Attribute: switch type, Side: server*/ \
		  { 0x0010, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_WRITABLE), { (uint8_t*)0x00  } }, /* 25 Cluster: On/off Switch Configuration, Attribute: switch actions, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } }, /* 26 Cluster: On/off Switch Configuration, Attribute: cluster revision, Side: server*/ \
		  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 27 Cluster: Level Control, Attribute: cluster revision, Side: client*/ \
		  { 0x0000, ZCL_IEEE_ADDRESS_ATTRIBUTE_TYPE, 8, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[64]) } }, /* 28 Cluster: Over the Air Bootloading, Attribute: OTA Upgrade Server ID, Side: client*/ \
	  { 0x0001, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)&(generatedDefaults[72]) } }, /* 29 Cluster: Over the Air Bootloading, Attribute: Offset (address) into the file, Side: client*/ \
	  { 0x0006, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00  } }, /* 30 Cluster: Over the Air Bootloading, Attribute: OTA Upgrade Status, Side: client*/ \
		  { 0x0007, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x1002  } }, /* 31 Cluster: Over the Air Bootloading, Attribute: Manufacturer ID, Side: client*/ \
		  { 0x0008, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)104  } }, /* 32 Cluster: Over the Air Bootloading, Attribute: Image Type ID, Side: client*/ \
		  { 0x0009, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x00  } }, /* 33 Cluster: Over the Air Bootloading, Attribute: Minimum Block Request Period, Side: client*/ \
		  { 0x000A, ZCL_INT32U_ATTRIBUTE_TYPE, 4, (ATTRIBUTE_MASK_CLIENT), { NULL } }, /* 34 Cluster: Over the Air Bootloading, Attribute: Image Stamp, Side: client*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_CLIENT), { (uint8_t*)0x0001  } }, /* 35 Cluster: Over the Air Bootloading, Attribute: cluster revision, Side: client*/ \
		  { 0x0001, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 36 Cluster: Generic Tunnel, Attribute: maximum incoming transfer size, Side: server*/ \
		  { 0x0002, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0000  } }, /* 37 Cluster: Generic Tunnel, Attribute: maximum outgoing transfer size, Side: server*/ \
		  { 0x0003, ZCL_OCTET_STRING_ATTRIBUTE_TYPE, 254, (ATTRIBUTE_MASK_WRITABLE), { NULL } }, /* 38 Cluster: Generic Tunnel, Attribute: protocol address, Side: server*/ \
	  { 0xFFFD, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (0x00), { (uint8_t*)0x0001  } } /* 39 Cluster: Generic Tunnel, Attribute: cluster revision, Side: server*/ \
		 }

 

#define GENERATED_CLUSTER_COUNT (24)
	
// This is an array of EmberAfCluster structures.
#define GENERATED_CLUSTERS { \
  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 14, 0, CLUSTER_MASK_SERVER, NULL }, /* 0, Endpoint Id: 1, Cluster: Basic, Side: server*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 1, Endpoint Id: 1, Cluster: Identify, Side: client*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 2, 4, CLUSTER_MASK_SERVER, NULL }, /* 2, Endpoint Id: 1, Cluster: Identify, Side: server*/ \
	  { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[18]), 1, 1, CLUSTER_MASK_SERVER, NULL }, /* 3, Endpoint Id: 1, Cluster: Groups, Side: server*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[20]), 2, 3, CLUSTER_MASK_CLIENT, NULL }, /* 4, Endpoint Id: 1, Cluster: On/off, Side: client*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[22]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 5, Endpoint Id: 1, Cluster: On/off, Side: server*/ \
	  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[27]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 6, Endpoint Id: 1, Cluster: Level Control, Side: client*/ \
	  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[28]), 8, 25, CLUSTER_MASK_CLIENT, NULL }, /* 7, Endpoint Id: 1, Cluster: Over the Air Bootloading, Side: client*/ \
	  { 0x0600, (EmberAfAttributeMetadata*)&(generatedAttributes[36]), 4, 260, CLUSTER_MASK_SERVER, NULL }, /* 8, Endpoint Id: 1, Cluster: Generic Tunnel, Side: server*/ \
	  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 13, 0, CLUSTER_MASK_SERVER, NULL }, /* 9, Endpoint Id: 2, Cluster: Basic, Side: server*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 1, 2, CLUSTER_MASK_SERVER, NULL }, /* 10, Endpoint Id: 2, Cluster: Identify, Side: server*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[20]), 2, 3, CLUSTER_MASK_CLIENT, NULL }, /* 11, Endpoint Id: 2, Cluster: On/off, Side: client*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[22]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 12, Endpoint Id: 2, Cluster: On/off, Side: server*/ \
	  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[28]), 3, 13, CLUSTER_MASK_CLIENT, NULL }, /* 13, Endpoint Id: 2, Cluster: Over the Air Bootloading, Side: client*/ \
	  { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 14, 0, CLUSTER_MASK_SERVER, NULL }, /* 14, Endpoint Id: 3, Cluster: Basic, Side: server*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[14]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 15, Endpoint Id: 3, Cluster: Identify, Side: client*/ \
	  { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[15]), 2, 4, CLUSTER_MASK_SERVER, NULL }, /* 16, Endpoint Id: 3, Cluster: Identify, Side: server*/ \
	  { 0x0004, (EmberAfAttributeMetadata*)&(generatedAttributes[17]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 17, Endpoint Id: 3, Cluster: Groups, Side: client*/ \
	  { 0x0005, (EmberAfAttributeMetadata*)&(generatedAttributes[19]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 18, Endpoint Id: 3, Cluster: Scenes, Side: client*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[20]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 19, Endpoint Id: 3, Cluster: On/off, Side: client*/ \
	  { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[22]), 2, 3, CLUSTER_MASK_SERVER, NULL }, /* 20, Endpoint Id: 3, Cluster: On/off, Side: server*/ \
	  { 0x0007, (EmberAfAttributeMetadata*)&(generatedAttributes[24]), 3, 4, CLUSTER_MASK_SERVER, NULL }, /* 21, Endpoint Id: 3, Cluster: On/off Switch Configuration, Side: server*/ \
	  { 0x0008, (EmberAfAttributeMetadata*)&(generatedAttributes[27]), 1, 2, CLUSTER_MASK_CLIENT, NULL }, /* 22, Endpoint Id: 3, Cluster: Level Control, Side: client*/ \
	  { 0x0019, (EmberAfAttributeMetadata*)&(generatedAttributes[28]), 4, 15, CLUSTER_MASK_CLIENT, NULL } /* 23, Endpoint Id: 3, Cluster: Over the Air Bootloading, Side: client*/ \
	 }

 
#define GENERATED_ENDPOINT_TYPE_COUNT (3)

// This is an array of EmberAfEndpointType structures.
#define GENERATED_ENDPOINT_TYPES { \
  { ((EmberAfCluster*)&(generatedClusters[0])), 9, 300 }, \
	  { ((EmberAfCluster*)&(generatedClusters[9])), 5, 21 }, \
	  { ((EmberAfCluster*)&(generatedClusters[14])), 10, 36 }, \
	 } 
// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST (254)

// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE (185)

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE (357)

// Number of fixed endpoints	
#define FIXED_ENDPOINT_COUNT (3)

// Array of endpoints that are supported, the data inside the array is the
// endpoint number.
#define FIXED_ENDPOINT_ARRAY { \
  1, \
  2, \
  3 \
}

// Array of profile ids
#define FIXED_PROFILE_IDS { \
  260, \
  260, \
  260 \
}

// Array of device ids
#define FIXED_DEVICE_IDS { \
  260, \
  2064, \
  260 \
}

// Array of device versions
#define FIXED_DEVICE_VERSIONS { \
  1, \
  1, \
  1 \
}

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { \
  0, \
  1, \
  2 \
}

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { \
  0, \
  0, \
  0 \
}

// Array of EmberAfCommandMetadata structs.
#define ZAP_COMMAND_MASK(mask) COMMAND_MASK_ ## mask
#define EMBER_AF_GENERATED_COMMAND_COUNT  (70)
#define GENERATED_COMMANDS { \
  { 0x0000, 0x00, COMMAND_MASK_INCOMING_SERVER }, /* 0, Cluster: Basic, Command: ResetToFactoryDefaults*/ \
	  { 0x0003, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 1, Cluster: Identify, Command: Identify*/ \
	  { 0x0003, 0x00, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 2, Cluster: Identify, Command: IdentifyQueryResponse*/ \
	  { 0x0003, 0x01, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 3, Cluster: Identify, Command: IdentifyQuery*/ \
	  { 0x0003, 0x40, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 4, Cluster: Identify, Command: TriggerEffect*/ \
	  { 0x0004, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 5, Cluster: Groups, Command: AddGroup*/ \
	  { 0x0004, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 6, Cluster: Groups, Command: AddGroupResponse*/ \
	  { 0x0004, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 7, Cluster: Groups, Command: ViewGroup*/ \
	  { 0x0004, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 8, Cluster: Groups, Command: ViewGroupResponse*/ \
	  { 0x0004, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* 9, Cluster: Groups, Command: GetGroupMembership*/ \
	  { 0x0004, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 10, Cluster: Groups, Command: GetGroupMembershipResponse*/ \
	  { 0x0004, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 11, Cluster: Groups, Command: RemoveGroup*/ \
	  { 0x0004, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* 12, Cluster: Groups, Command: RemoveGroupResponse*/ \
	  { 0x0004, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* 13, Cluster: Groups, Command: RemoveAllGroups*/ \
	  { 0x0004, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* 14, Cluster: Groups, Command: AddGroupIfIdentifying*/ \
	  { 0x0005, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 15, Cluster: Scenes, Command: AddScene*/ \
	  { 0x0005, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 16, Cluster: Scenes, Command: AddSceneResponse*/ \
	  { 0x0005, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 17, Cluster: Scenes, Command: ViewScene*/ \
	  { 0x0005, 0x01, COMMAND_MASK_INCOMING_CLIENT }, /* 18, Cluster: Scenes, Command: ViewSceneResponse*/ \
	  { 0x0005, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* 19, Cluster: Scenes, Command: RemoveScene*/ \
	  { 0x0005, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 20, Cluster: Scenes, Command: RemoveSceneResponse*/ \
	  { 0x0005, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 21, Cluster: Scenes, Command: RemoveAllScenes*/ \
	  { 0x0005, 0x03, COMMAND_MASK_INCOMING_CLIENT }, /* 22, Cluster: Scenes, Command: RemoveAllScenesResponse*/ \
	  { 0x0005, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* 23, Cluster: Scenes, Command: StoreScene*/ \
	  { 0x0005, 0x04, COMMAND_MASK_INCOMING_CLIENT }, /* 24, Cluster: Scenes, Command: StoreSceneResponse*/ \
	  { 0x0005, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* 25, Cluster: Scenes, Command: RecallScene*/ \
	  { 0x0005, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* 26, Cluster: Scenes, Command: GetSceneMembership*/ \
	  { 0x0005, 0x06, COMMAND_MASK_INCOMING_CLIENT }, /* 27, Cluster: Scenes, Command: GetSceneMembershipResponse*/ \
	  { 0x0005, 0x40, COMMAND_MASK_INCOMING_CLIENT }, /* 28, Cluster: Scenes, Command: EnhancedAddSceneResponse*/ \
	  { 0x0005, 0x41, COMMAND_MASK_INCOMING_CLIENT }, /* 29, Cluster: Scenes, Command: EnhancedViewSceneResponse*/ \
	  { 0x0005, 0x42, COMMAND_MASK_INCOMING_CLIENT }, /* 30, Cluster: Scenes, Command: CopySceneResponse*/ \
	  { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 31, Cluster: On/off, Command: Off*/ \
	  { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 32, Cluster: On/off, Command: On*/ \
	  { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* 33, Cluster: On/off, Command: Toggle*/ \
	  { 0x0008, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* 34, Cluster: Level Control, Command: MoveToLevel*/ \
	  { 0x0008, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 35, Cluster: Level Control, Command: Move*/ \
	  { 0x0008, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* 36, Cluster: Level Control, Command: Step*/ \
	  { 0x0008, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 37, Cluster: Level Control, Command: Stop*/ \
	  { 0x0008, 0x04, COMMAND_MASK_OUTGOING_CLIENT }, /* 38, Cluster: Level Control, Command: MoveToLevelWithOnOff*/ \
	  { 0x0008, 0x05, COMMAND_MASK_OUTGOING_CLIENT }, /* 39, Cluster: Level Control, Command: MoveWithOnOff*/ \
	  { 0x0008, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* 40, Cluster: Level Control, Command: StepWithOnOff*/ \
	  { 0x0008, 0x07, COMMAND_MASK_OUTGOING_CLIENT }, /* 41, Cluster: Level Control, Command: StopWithOnOff*/ \
	  { 0x0019, 0x00, COMMAND_MASK_INCOMING_CLIENT }, /* 42, Cluster: Over the Air Bootloading, Command: ImageNotify*/ \
	  { 0x0019, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* 43, Cluster: Over the Air Bootloading, Command: QueryNextImageRequest*/ \
	  { 0x0019, 0x02, COMMAND_MASK_INCOMING_CLIENT }, /* 44, Cluster: Over the Air Bootloading, Command: QueryNextImageResponse*/ \
	  { 0x0019, 0x03, COMMAND_MASK_OUTGOING_CLIENT }, /* 45, Cluster: Over the Air Bootloading, Command: ImageBlockRequest*/ \
	  { 0x0019, 0x05, COMMAND_MASK_INCOMING_CLIENT }, /* 46, Cluster: Over the Air Bootloading, Command: ImageBlockResponse*/ \
	  { 0x0019, 0x06, COMMAND_MASK_OUTGOING_CLIENT }, /* 47, Cluster: Over the Air Bootloading, Command: UpgradeEndRequest*/ \
	  { 0x0019, 0x07, COMMAND_MASK_INCOMING_CLIENT }, /* 48, Cluster: Over the Air Bootloading, Command: UpgradeEndResponse*/ \
	  { 0x0300, 0x07, COMMAND_MASK_OUTGOING_CLIENT }, /* 49, Cluster: Color Control, Command: MoveToColor*/ \
	  { 0x0300, 0x08, COMMAND_MASK_OUTGOING_CLIENT }, /* 50, Cluster: Color Control, Command: MoveColor*/ \
	  { 0x0300, 0x09, COMMAND_MASK_OUTGOING_CLIENT }, /* 51, Cluster: Color Control, Command: StepColor*/ \
	  { 0x1000, 0x00, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 52, Cluster: ZLL Commissioning, Command: ScanRequest*/ \
	  { 0x1000, 0x01, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 53, Cluster: ZLL Commissioning, Command: ScanResponse*/ \
	  { 0x1000, 0x02, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 54, Cluster: ZLL Commissioning, Command: DeviceInformationRequest*/ \
	  { 0x1000, 0x03, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 55, Cluster: ZLL Commissioning, Command: DeviceInformationResponse*/ \
	  { 0x1000, 0x06, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 56, Cluster: ZLL Commissioning, Command: IdentifyRequest*/ \
	  { 0x1000, 0x07, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 57, Cluster: ZLL Commissioning, Command: ResetToFactoryNewRequest*/ \
	  { 0x1000, 0x10, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 58, Cluster: ZLL Commissioning, Command: NetworkStartRequest*/ \
	  { 0x1000, 0x11, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 59, Cluster: ZLL Commissioning, Command: NetworkStartResponse*/ \
	  { 0x1000, 0x12, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 60, Cluster: ZLL Commissioning, Command: NetworkJoinRouterRequest*/ \
	  { 0x1000, 0x13, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 61, Cluster: ZLL Commissioning, Command: NetworkJoinRouterResponse*/ \
	  { 0x1000, 0x14, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 62, Cluster: ZLL Commissioning, Command: NetworkJoinEndDeviceRequest*/ \
	  { 0x1000, 0x15, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 63, Cluster: ZLL Commissioning, Command: NetworkJoinEndDeviceResponse*/ \
	  { 0x1000, 0x16, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 64, Cluster: ZLL Commissioning, Command: NetworkUpdateRequest*/ \
	  { 0x1000, 0x40, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 65, Cluster: ZLL Commissioning, Command: EndpointInformation*/ \
	  { 0x1000, 0x41, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 66, Cluster: ZLL Commissioning, Command: GetGroupIdentifiersRequest*/ \
	  { 0x1000, 0x41, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 67, Cluster: ZLL Commissioning, Command: GetGroupIdentifiersResponse*/ \
	  { 0x1000, 0x42, COMMAND_MASK_INCOMING_SERVER | COMMAND_MASK_OUTGOING_CLIENT }, /* 68, Cluster: ZLL Commissioning, Command: GetEndpointListRequest*/ \
	  { 0x1000, 0x42, COMMAND_MASK_INCOMING_CLIENT | COMMAND_MASK_OUTGOING_SERVER }, /* 69, Cluster: ZLL Commissioning, Command: GetEndpointListResponse*/ \
	 } 
// Array of EmberAfManufacturerCodeEntry structures for commands.
#define GENERATED_COMMAND_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_COMMAND_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
																																																																						 } 
// This is an array of EmberAfManufacturerCodeEntry structures for clusters.
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_CLUSTER_MANUFACTURER_CODES { \
  { 0x00, 0x00 }  \
																								 } 
// This is an array of EmberAfManufacturerCodeEntry structures for attributes.
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT (0)
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES { \
  { 0x00, 0x00 } \
																																								 } 
// Array of EmberAfPluginReportingEntry structures.
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS_TABLE_SIZE (3)
#define EMBER_AF_GENERATED_REPORTING_CONFIG_DEFAULTS { \
  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0001, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 1, Cluster: On/off, Attribute: on/off */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0002, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 2, Cluster: On/off, Attribute: on/off */ \
	  { EMBER_ZCL_REPORTING_DIRECTION_REPORTED, 0x0003, 0x0006, 0x0000, CLUSTER_MASK_SERVER, 0x0000, 1, 65534, 0 }, /* Endpoint Id: 3, Cluster: On/off, Attribute: on/off */ \
	 } 

#define EMBER_AF_MANUFACTURER_CODE 0x1002
#define EMBER_AF_DEFAULT_RESPONSE_POLICY_ALWAYS

// All Enabled Clusters
#define ZCL_USING_BASIC_CLUSTER_SERVER
#define ZCL_USING_IDENTIFY_CLUSTER_CLIENT
#define ZCL_USING_IDENTIFY_CLUSTER_SERVER
#define ZCL_USING_GROUPS_CLUSTER_CLIENT
#define ZCL_USING_GROUPS_CLUSTER_SERVER
#define ZCL_USING_SCENES_CLUSTER_CLIENT
#define ZCL_USING_ON_OFF_CLUSTER_CLIENT
#define ZCL_USING_ON_OFF_CLUSTER_SERVER
#define ZCL_USING_ON_OFF_SWITCH_CONFIG_CLUSTER_SERVER
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLIENT
#define ZCL_USING_COLOR_CONTROL_CLUSTER_CLIENT
#define ZCL_USING_GENERIC_TUNNEL_CLUSTER_SERVER
#define ZCL_USING_ZLL_COMMISSIONING_CLUSTER_CLIENT
#define ZCL_USING_ZLL_COMMISSIONING_CLUSTER_SERVER

// Cluster Counts
#define EMBER_AF_BASIC_CLUSTER_SERVER_ENDPOINT_COUNT (3)
#define EMBER_AF_IDENTIFY_CLUSTER_CLIENT_ENDPOINT_COUNT (3)
#define EMBER_AF_IDENTIFY_CLUSTER_SERVER_ENDPOINT_COUNT (3)
#define EMBER_AF_GROUPS_CLUSTER_CLIENT_ENDPOINT_COUNT (3)
#define EMBER_AF_GROUPS_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_SCENES_CLUSTER_CLIENT_ENDPOINT_COUNT (3)
#define EMBER_AF_ON_OFF_CLUSTER_CLIENT_ENDPOINT_COUNT (3)
#define EMBER_AF_ON_OFF_CLUSTER_SERVER_ENDPOINT_COUNT (3)
#define EMBER_AF_ON_OFF_SWITCH_CONFIG_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_LEVEL_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (3)
#define EMBER_AF_OTA_BOOTLOAD_CLUSTER_CLIENT_ENDPOINT_COUNT (3)
#define EMBER_AF_COLOR_CONTROL_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_GENERIC_TUNNEL_CLUSTER_SERVER_ENDPOINT_COUNT (1)
#define EMBER_AF_ZLL_COMMISSIONING_CLUSTER_CLIENT_ENDPOINT_COUNT (1)
#define EMBER_AF_ZLL_COMMISSIONING_CLUSTER_SERVER_ENDPOINT_COUNT (1)

// All Enabled Cluster Attributes
#define ZCL_USING_BASIC_CLUSTER_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_APPLICATION_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_STACK_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_HW_VERSION_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_MANUFACTURER_NAME_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_MODEL_IDENTIFIER_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_DATE_CODE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_POWER_SOURCE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_GENERIC_DEVICE_CLASS_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_GENERIC_DEVICE_TYPE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_PRODUCT_CODE_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_PRODUCT_URL_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_SW_BUILD_ID_ATTRIBUTE
#define ZCL_USING_BASIC_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_IDENTIFY_TIME_ATTRIBUTE
#define ZCL_USING_IDENTIFY_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_GROUPS_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_GROUPS_CLUSTER_GROUP_NAME_SUPPORT_ATTRIBUTE
#define ZCL_USING_SCENES_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_REPORTING_STATUS_CLIENT_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_ON_OFF_ATTRIBUTE
#define ZCL_USING_ON_OFF_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_ON_OFF_SWITCH_CONFIG_CLUSTER_SWITCH_TYPE_ATTRIBUTE
#define ZCL_USING_ON_OFF_SWITCH_CONFIG_CLUSTER_SWITCH_ACTIONS_ATTRIBUTE
#define ZCL_USING_ON_OFF_SWITCH_CONFIG_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE
#define ZCL_USING_LEVEL_CONTROL_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_UPGRADE_SERVER_ID_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_FILE_OFFSET_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_UPGRADE_STATUS_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_MANUFACTURER_ID_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_TYPE_ID_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_MINIMUM_BLOCK_REQUEST_PERIOD_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_IMAGE_STAMP_ATTRIBUTE
#define ZCL_USING_OTA_BOOTLOAD_CLUSTER_CLUSTER_REVISION_CLIENT_ATTRIBUTE
#define ZCL_USING_GENERIC_TUNNEL_CLUSTER_MAXIMUM_INCOMING_TRANSFER_SIZE_ATTRIBUTE
#define ZCL_USING_GENERIC_TUNNEL_CLUSTER_MAXIMUM_OUTGOING_TRANSFER_SIZE_ATTRIBUTE
#define ZCL_USING_GENERIC_TUNNEL_CLUSTER_PROTOCOL_ADDRESS_ATTRIBUTE
#define ZCL_USING_GENERIC_TUNNEL_CLUSTER_CLUSTER_REVISION_SERVER_ATTRIBUTE

#define EMBER_AF_SUPPORT_COMMAND_DISCOVERY


#endif // SILABS_AF_ENDPOINT_CONFIG